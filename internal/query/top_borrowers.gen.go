// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/danielmesquitta/library-manager/internal/model"
)

func newTopBorrower(db *gorm.DB, opts ...gen.DOOption) topBorrower {
	_topBorrower := topBorrower{}

	_topBorrower.topBorrowerDo.UseDB(db, opts...)
	_topBorrower.topBorrowerDo.UseModel(&model.TopBorrower{})

	tableName := _topBorrower.topBorrowerDo.TableName()
	_topBorrower.ALL = field.NewAsterisk(tableName)
	_topBorrower.AuthorID = field.NewUint(tableName, "author_id")
	_topBorrower.AuthorName = field.NewString(tableName, "author_name")
	_topBorrower.BorrowerID = field.NewUint(tableName, "borrower_id")
	_topBorrower.BorrowerName = field.NewString(tableName, "borrower_name")
	_topBorrower.LoanCount = field.NewInt(tableName, "loan_count")

	_topBorrower.fillFieldMap()

	return _topBorrower
}

type topBorrower struct {
	topBorrowerDo topBorrowerDo

	ALL          field.Asterisk
	AuthorID     field.Uint
	AuthorName   field.String
	BorrowerID   field.Uint
	BorrowerName field.String
	LoanCount    field.Int

	fieldMap map[string]field.Expr
}

func (t topBorrower) Table(newTableName string) *topBorrower {
	t.topBorrowerDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t topBorrower) As(alias string) *topBorrower {
	t.topBorrowerDo.DO = *(t.topBorrowerDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *topBorrower) updateTableName(table string) *topBorrower {
	t.ALL = field.NewAsterisk(table)
	t.AuthorID = field.NewUint(table, "author_id")
	t.AuthorName = field.NewString(table, "author_name")
	t.BorrowerID = field.NewUint(table, "borrower_id")
	t.BorrowerName = field.NewString(table, "borrower_name")
	t.LoanCount = field.NewInt(table, "loan_count")

	t.fillFieldMap()

	return t
}

func (t *topBorrower) WithContext(ctx context.Context) *topBorrowerDo {
	return t.topBorrowerDo.WithContext(ctx)
}

func (t topBorrower) TableName() string { return t.topBorrowerDo.TableName() }

func (t topBorrower) Alias() string { return t.topBorrowerDo.Alias() }

func (t topBorrower) Columns(cols ...field.Expr) gen.Columns { return t.topBorrowerDo.Columns(cols...) }

func (t *topBorrower) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *topBorrower) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["author_id"] = t.AuthorID
	t.fieldMap["author_name"] = t.AuthorName
	t.fieldMap["borrower_id"] = t.BorrowerID
	t.fieldMap["borrower_name"] = t.BorrowerName
	t.fieldMap["loan_count"] = t.LoanCount
}

func (t topBorrower) clone(db *gorm.DB) topBorrower {
	t.topBorrowerDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t topBorrower) replaceDB(db *gorm.DB) topBorrower {
	t.topBorrowerDo.ReplaceDB(db)
	return t
}

type topBorrowerDo struct{ gen.DO }

// ListTopBorrowersByAuthor returns the top borrowers for each author.
// The limit parameter specifies the maximum number of borrowers to return for each author.
//
// SELECT sub.author_id,
//
//	a.name AS author_name,
//	sub.borrower_id,
//	br.name AS borrower_name,
//	sub.loan_count
//
// FROM (
//
//		SELECT bo.author_id,
//			l.borrower_id,
//			COUNT(*) AS loan_count,
//			ROW_NUMBER() OVER (
//				PARTITION BY bo.author_id
//				ORDER BY COUNT(*) DESC
//			) AS rn
//		FROM loans l
//			JOIN books bo ON l.book_id = bo.id
//		GROUP BY bo.author_id,
//			l.borrower_id
//	) AS sub
//	JOIN authors a ON a.id = sub.author_id
//	JOIN borrowers br ON br.id = sub.borrower_id
//
// WHERE sub.rn <= @limit;
func (t topBorrowerDo) ListTopBorrowersByAuthor(limit int) (result []model.TopBorrower, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	generateSQL.WriteString("SELECT sub.author_id, a.name AS author_name, sub.borrower_id, br.name AS borrower_name, sub.loan_count FROM ( SELECT bo.author_id, l.borrower_id, COUNT(*) AS loan_count, ROW_NUMBER() OVER ( PARTITION BY bo.author_id ORDER BY COUNT(*) DESC ) AS rn FROM loans l JOIN books bo ON l.book_id = bo.id GROUP BY bo.author_id, l.borrower_id ) AS sub JOIN authors a ON a.id = sub.author_id JOIN borrowers br ON br.id = sub.borrower_id WHERE sub.rn <= ?; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t topBorrowerDo) Debug() *topBorrowerDo {
	return t.withDO(t.DO.Debug())
}

func (t topBorrowerDo) WithContext(ctx context.Context) *topBorrowerDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t topBorrowerDo) ReadDB() *topBorrowerDo {
	return t.Clauses(dbresolver.Read)
}

func (t topBorrowerDo) WriteDB() *topBorrowerDo {
	return t.Clauses(dbresolver.Write)
}

func (t topBorrowerDo) Session(config *gorm.Session) *topBorrowerDo {
	return t.withDO(t.DO.Session(config))
}

func (t topBorrowerDo) Clauses(conds ...clause.Expression) *topBorrowerDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t topBorrowerDo) Returning(value interface{}, columns ...string) *topBorrowerDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t topBorrowerDo) Not(conds ...gen.Condition) *topBorrowerDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t topBorrowerDo) Or(conds ...gen.Condition) *topBorrowerDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t topBorrowerDo) Select(conds ...field.Expr) *topBorrowerDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t topBorrowerDo) Where(conds ...gen.Condition) *topBorrowerDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t topBorrowerDo) Order(conds ...field.Expr) *topBorrowerDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t topBorrowerDo) Distinct(cols ...field.Expr) *topBorrowerDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t topBorrowerDo) Omit(cols ...field.Expr) *topBorrowerDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t topBorrowerDo) Join(table schema.Tabler, on ...field.Expr) *topBorrowerDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t topBorrowerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *topBorrowerDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t topBorrowerDo) RightJoin(table schema.Tabler, on ...field.Expr) *topBorrowerDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t topBorrowerDo) Group(cols ...field.Expr) *topBorrowerDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t topBorrowerDo) Having(conds ...gen.Condition) *topBorrowerDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t topBorrowerDo) Limit(limit int) *topBorrowerDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t topBorrowerDo) Offset(offset int) *topBorrowerDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t topBorrowerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *topBorrowerDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t topBorrowerDo) Unscoped() *topBorrowerDo {
	return t.withDO(t.DO.Unscoped())
}

func (t topBorrowerDo) Create(values ...*model.TopBorrower) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t topBorrowerDo) CreateInBatches(values []*model.TopBorrower, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t topBorrowerDo) Save(values ...*model.TopBorrower) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t topBorrowerDo) First() (*model.TopBorrower, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopBorrower), nil
	}
}

func (t topBorrowerDo) Take() (*model.TopBorrower, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopBorrower), nil
	}
}

func (t topBorrowerDo) Last() (*model.TopBorrower, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopBorrower), nil
	}
}

func (t topBorrowerDo) Find() ([]*model.TopBorrower, error) {
	result, err := t.DO.Find()
	return result.([]*model.TopBorrower), err
}

func (t topBorrowerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TopBorrower, err error) {
	buf := make([]*model.TopBorrower, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t topBorrowerDo) FindInBatches(result *[]*model.TopBorrower, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t topBorrowerDo) Attrs(attrs ...field.AssignExpr) *topBorrowerDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t topBorrowerDo) Assign(attrs ...field.AssignExpr) *topBorrowerDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t topBorrowerDo) Joins(fields ...field.RelationField) *topBorrowerDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t topBorrowerDo) Preload(fields ...field.RelationField) *topBorrowerDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t topBorrowerDo) FirstOrInit() (*model.TopBorrower, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopBorrower), nil
	}
}

func (t topBorrowerDo) FirstOrCreate() (*model.TopBorrower, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopBorrower), nil
	}
}

func (t topBorrowerDo) FindByPage(offset int, limit int) (result []*model.TopBorrower, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t topBorrowerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t topBorrowerDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t topBorrowerDo) Delete(models ...*model.TopBorrower) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *topBorrowerDo) withDO(do gen.Dao) *topBorrowerDo {
	t.DO = *do.(*gen.DO)
	return t
}
