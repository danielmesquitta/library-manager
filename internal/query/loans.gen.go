// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/danielmesquitta/library-manager/internal/model"
)

func newLoan(db *gorm.DB, opts ...gen.DOOption) loan {
	_loan := loan{}

	_loan.loanDo.UseDB(db, opts...)
	_loan.loanDo.UseModel(&model.Loan{})

	tableName := _loan.loanDo.TableName()
	_loan.ALL = field.NewAsterisk(tableName)
	_loan.ID = field.NewField(tableName, "id")
	_loan.BookID = field.NewField(tableName, "book_id")
	_loan.BorrowerID = field.NewField(tableName, "borrower_id")
	_loan.DueDate = field.NewTime(tableName, "due_date")
	_loan.ReturnedAt = field.NewTime(tableName, "returned_at")
	_loan.CreatedAt = field.NewTime(tableName, "created_at")
	_loan.UpdatedAt = field.NewTime(tableName, "updated_at")
	_loan.DeletedAt = field.NewField(tableName, "deleted_at")
	_loan.Book = loanBelongsToBook{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Book", "model.Book"),
		Author: struct {
			field.RelationField
			Books struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Book.Author", "model.Author"),
			Books: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Book.Author.Books", "model.Book"),
			},
		},
	}

	_loan.Borrower = loanBelongsToBorrower{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Borrower", "model.Borrower"),
		Loans: struct {
			field.RelationField
			Book struct {
				field.RelationField
			}
			Borrower struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Borrower.Loans", "model.Loan"),
			Book: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Borrower.Loans.Book", "model.Book"),
			},
			Borrower: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Borrower.Loans.Borrower", "model.Borrower"),
			},
		},
	}

	_loan.fillFieldMap()

	return _loan
}

type loan struct {
	loanDo loanDo

	ALL        field.Asterisk
	ID         field.Field
	BookID     field.Field
	BorrowerID field.Field
	DueDate    field.Time
	ReturnedAt field.Time
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	Book       loanBelongsToBook

	Borrower loanBelongsToBorrower

	fieldMap map[string]field.Expr
}

func (l loan) Table(newTableName string) *loan {
	l.loanDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loan) As(alias string) *loan {
	l.loanDo.DO = *(l.loanDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loan) updateTableName(table string) *loan {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewField(table, "id")
	l.BookID = field.NewField(table, "book_id")
	l.BorrowerID = field.NewField(table, "borrower_id")
	l.DueDate = field.NewTime(table, "due_date")
	l.ReturnedAt = field.NewTime(table, "returned_at")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")

	l.fillFieldMap()

	return l
}

func (l *loan) WithContext(ctx context.Context) *loanDo { return l.loanDo.WithContext(ctx) }

func (l loan) TableName() string { return l.loanDo.TableName() }

func (l loan) Alias() string { return l.loanDo.Alias() }

func (l loan) Columns(cols ...field.Expr) gen.Columns { return l.loanDo.Columns(cols...) }

func (l *loan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loan) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["id"] = l.ID
	l.fieldMap["book_id"] = l.BookID
	l.fieldMap["borrower_id"] = l.BorrowerID
	l.fieldMap["due_date"] = l.DueDate
	l.fieldMap["returned_at"] = l.ReturnedAt
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt

}

func (l loan) clone(db *gorm.DB) loan {
	l.loanDo.ReplaceConnPool(db.Statement.ConnPool)
	l.Book.db = db.Session(&gorm.Session{Initialized: true})
	l.Book.db.Statement.ConnPool = db.Statement.ConnPool
	l.Borrower.db = db.Session(&gorm.Session{Initialized: true})
	l.Borrower.db.Statement.ConnPool = db.Statement.ConnPool
	return l
}

func (l loan) replaceDB(db *gorm.DB) loan {
	l.loanDo.ReplaceDB(db)
	l.Book.db = db.Session(&gorm.Session{})
	l.Borrower.db = db.Session(&gorm.Session{})
	return l
}

type loanBelongsToBook struct {
	db *gorm.DB

	field.RelationField

	Author struct {
		field.RelationField
		Books struct {
			field.RelationField
		}
	}
}

func (a loanBelongsToBook) Where(conds ...field.Expr) *loanBelongsToBook {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a loanBelongsToBook) WithContext(ctx context.Context) *loanBelongsToBook {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a loanBelongsToBook) Session(session *gorm.Session) *loanBelongsToBook {
	a.db = a.db.Session(session)
	return &a
}

func (a loanBelongsToBook) Model(m *model.Loan) *loanBelongsToBookTx {
	return &loanBelongsToBookTx{a.db.Model(m).Association(a.Name())}
}

func (a loanBelongsToBook) Unscoped() *loanBelongsToBook {
	a.db = a.db.Unscoped()
	return &a
}

type loanBelongsToBookTx struct{ tx *gorm.Association }

func (a loanBelongsToBookTx) Find() (result *model.Book, err error) {
	return result, a.tx.Find(&result)
}

func (a loanBelongsToBookTx) Append(values ...*model.Book) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a loanBelongsToBookTx) Replace(values ...*model.Book) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a loanBelongsToBookTx) Delete(values ...*model.Book) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a loanBelongsToBookTx) Clear() error {
	return a.tx.Clear()
}

func (a loanBelongsToBookTx) Count() int64 {
	return a.tx.Count()
}

func (a loanBelongsToBookTx) Unscoped() *loanBelongsToBookTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type loanBelongsToBorrower struct {
	db *gorm.DB

	field.RelationField

	Loans struct {
		field.RelationField
		Book struct {
			field.RelationField
		}
		Borrower struct {
			field.RelationField
		}
	}
}

func (a loanBelongsToBorrower) Where(conds ...field.Expr) *loanBelongsToBorrower {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a loanBelongsToBorrower) WithContext(ctx context.Context) *loanBelongsToBorrower {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a loanBelongsToBorrower) Session(session *gorm.Session) *loanBelongsToBorrower {
	a.db = a.db.Session(session)
	return &a
}

func (a loanBelongsToBorrower) Model(m *model.Loan) *loanBelongsToBorrowerTx {
	return &loanBelongsToBorrowerTx{a.db.Model(m).Association(a.Name())}
}

func (a loanBelongsToBorrower) Unscoped() *loanBelongsToBorrower {
	a.db = a.db.Unscoped()
	return &a
}

type loanBelongsToBorrowerTx struct{ tx *gorm.Association }

func (a loanBelongsToBorrowerTx) Find() (result *model.Borrower, err error) {
	return result, a.tx.Find(&result)
}

func (a loanBelongsToBorrowerTx) Append(values ...*model.Borrower) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a loanBelongsToBorrowerTx) Replace(values ...*model.Borrower) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a loanBelongsToBorrowerTx) Delete(values ...*model.Borrower) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a loanBelongsToBorrowerTx) Clear() error {
	return a.tx.Clear()
}

func (a loanBelongsToBorrowerTx) Count() int64 {
	return a.tx.Count()
}

func (a loanBelongsToBorrowerTx) Unscoped() *loanBelongsToBorrowerTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type loanDo struct{ gen.DO }

func (l loanDo) Debug() *loanDo {
	return l.withDO(l.DO.Debug())
}

func (l loanDo) WithContext(ctx context.Context) *loanDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loanDo) ReadDB() *loanDo {
	return l.Clauses(dbresolver.Read)
}

func (l loanDo) WriteDB() *loanDo {
	return l.Clauses(dbresolver.Write)
}

func (l loanDo) Session(config *gorm.Session) *loanDo {
	return l.withDO(l.DO.Session(config))
}

func (l loanDo) Clauses(conds ...clause.Expression) *loanDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loanDo) Returning(value interface{}, columns ...string) *loanDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loanDo) Not(conds ...gen.Condition) *loanDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loanDo) Or(conds ...gen.Condition) *loanDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loanDo) Select(conds ...field.Expr) *loanDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loanDo) Where(conds ...gen.Condition) *loanDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loanDo) Order(conds ...field.Expr) *loanDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loanDo) Distinct(cols ...field.Expr) *loanDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loanDo) Omit(cols ...field.Expr) *loanDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loanDo) Join(table schema.Tabler, on ...field.Expr) *loanDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loanDo) LeftJoin(table schema.Tabler, on ...field.Expr) *loanDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loanDo) RightJoin(table schema.Tabler, on ...field.Expr) *loanDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loanDo) Group(cols ...field.Expr) *loanDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loanDo) Having(conds ...gen.Condition) *loanDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loanDo) Limit(limit int) *loanDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loanDo) Offset(offset int) *loanDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *loanDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loanDo) Unscoped() *loanDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loanDo) Create(values ...*model.Loan) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loanDo) CreateInBatches(values []*model.Loan, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loanDo) Save(values ...*model.Loan) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loanDo) First() (*model.Loan, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Loan), nil
	}
}

func (l loanDo) Take() (*model.Loan, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Loan), nil
	}
}

func (l loanDo) Last() (*model.Loan, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Loan), nil
	}
}

func (l loanDo) Find() ([]*model.Loan, error) {
	result, err := l.DO.Find()
	return result.([]*model.Loan), err
}

func (l loanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Loan, err error) {
	buf := make([]*model.Loan, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loanDo) FindInBatches(result *[]*model.Loan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loanDo) Attrs(attrs ...field.AssignExpr) *loanDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loanDo) Assign(attrs ...field.AssignExpr) *loanDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loanDo) Joins(fields ...field.RelationField) *loanDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loanDo) Preload(fields ...field.RelationField) *loanDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loanDo) FirstOrInit() (*model.Loan, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Loan), nil
	}
}

func (l loanDo) FirstOrCreate() (*model.Loan, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Loan), nil
	}
}

func (l loanDo) FindByPage(offset int, limit int) (result []*model.Loan, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loanDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loanDo) Delete(models ...*model.Loan) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loanDo) withDO(do gen.Dao) *loanDo {
	l.DO = *do.(*gen.DO)
	return l
}
