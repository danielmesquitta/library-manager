// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/danielmesquitta/library-manager/internal/model"
)

func newBorrower(db *gorm.DB, opts ...gen.DOOption) borrower {
	_borrower := borrower{}

	_borrower.borrowerDo.UseDB(db, opts...)
	_borrower.borrowerDo.UseModel(&model.Borrower{})

	tableName := _borrower.borrowerDo.TableName()
	_borrower.ALL = field.NewAsterisk(tableName)
	_borrower.ID = field.NewField(tableName, "id")
	_borrower.Name = field.NewString(tableName, "name")
	_borrower.Email = field.NewString(tableName, "email")
	_borrower.CreatedAt = field.NewTime(tableName, "created_at")
	_borrower.UpdatedAt = field.NewTime(tableName, "updated_at")
	_borrower.DeletedAt = field.NewField(tableName, "deleted_at")
	_borrower.Loans = borrowerHasManyLoans{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Loans", "model.Loan"),
		Book: struct {
			field.RelationField
			Author struct {
				field.RelationField
				Books struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Loans.Book", "model.Book"),
			Author: struct {
				field.RelationField
				Books struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Loans.Book.Author", "model.Author"),
				Books: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Loans.Book.Author.Books", "model.Book"),
				},
			},
		},
		Borrower: struct {
			field.RelationField
			Loans struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Loans.Borrower", "model.Borrower"),
			Loans: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Loans.Borrower.Loans", "model.Loan"),
			},
		},
	}

	_borrower.fillFieldMap()

	return _borrower
}

type borrower struct {
	borrowerDo borrowerDo

	ALL       field.Asterisk
	ID        field.Field
	Name      field.String
	Email     field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Loans     borrowerHasManyLoans

	fieldMap map[string]field.Expr
}

func (b borrower) Table(newTableName string) *borrower {
	b.borrowerDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b borrower) As(alias string) *borrower {
	b.borrowerDo.DO = *(b.borrowerDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *borrower) updateTableName(table string) *borrower {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewField(table, "id")
	b.Name = field.NewString(table, "name")
	b.Email = field.NewString(table, "email")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewField(table, "deleted_at")

	b.fillFieldMap()

	return b
}

func (b *borrower) WithContext(ctx context.Context) *borrowerDo { return b.borrowerDo.WithContext(ctx) }

func (b borrower) TableName() string { return b.borrowerDo.TableName() }

func (b borrower) Alias() string { return b.borrowerDo.Alias() }

func (b borrower) Columns(cols ...field.Expr) gen.Columns { return b.borrowerDo.Columns(cols...) }

func (b *borrower) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *borrower) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["email"] = b.Email
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt

}

func (b borrower) clone(db *gorm.DB) borrower {
	b.borrowerDo.ReplaceConnPool(db.Statement.ConnPool)
	b.Loans.db = db.Session(&gorm.Session{Initialized: true})
	b.Loans.db.Statement.ConnPool = db.Statement.ConnPool
	return b
}

func (b borrower) replaceDB(db *gorm.DB) borrower {
	b.borrowerDo.ReplaceDB(db)
	b.Loans.db = db.Session(&gorm.Session{})
	return b
}

type borrowerHasManyLoans struct {
	db *gorm.DB

	field.RelationField

	Book struct {
		field.RelationField
		Author struct {
			field.RelationField
			Books struct {
				field.RelationField
			}
		}
	}
	Borrower struct {
		field.RelationField
		Loans struct {
			field.RelationField
		}
	}
}

func (a borrowerHasManyLoans) Where(conds ...field.Expr) *borrowerHasManyLoans {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a borrowerHasManyLoans) WithContext(ctx context.Context) *borrowerHasManyLoans {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a borrowerHasManyLoans) Session(session *gorm.Session) *borrowerHasManyLoans {
	a.db = a.db.Session(session)
	return &a
}

func (a borrowerHasManyLoans) Model(m *model.Borrower) *borrowerHasManyLoansTx {
	return &borrowerHasManyLoansTx{a.db.Model(m).Association(a.Name())}
}

func (a borrowerHasManyLoans) Unscoped() *borrowerHasManyLoans {
	a.db = a.db.Unscoped()
	return &a
}

type borrowerHasManyLoansTx struct{ tx *gorm.Association }

func (a borrowerHasManyLoansTx) Find() (result []*model.Loan, err error) {
	return result, a.tx.Find(&result)
}

func (a borrowerHasManyLoansTx) Append(values ...*model.Loan) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a borrowerHasManyLoansTx) Replace(values ...*model.Loan) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a borrowerHasManyLoansTx) Delete(values ...*model.Loan) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a borrowerHasManyLoansTx) Clear() error {
	return a.tx.Clear()
}

func (a borrowerHasManyLoansTx) Count() int64 {
	return a.tx.Count()
}

func (a borrowerHasManyLoansTx) Unscoped() *borrowerHasManyLoansTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type borrowerDo struct{ gen.DO }

func (b borrowerDo) Debug() *borrowerDo {
	return b.withDO(b.DO.Debug())
}

func (b borrowerDo) WithContext(ctx context.Context) *borrowerDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b borrowerDo) ReadDB() *borrowerDo {
	return b.Clauses(dbresolver.Read)
}

func (b borrowerDo) WriteDB() *borrowerDo {
	return b.Clauses(dbresolver.Write)
}

func (b borrowerDo) Session(config *gorm.Session) *borrowerDo {
	return b.withDO(b.DO.Session(config))
}

func (b borrowerDo) Clauses(conds ...clause.Expression) *borrowerDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b borrowerDo) Returning(value interface{}, columns ...string) *borrowerDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b borrowerDo) Not(conds ...gen.Condition) *borrowerDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b borrowerDo) Or(conds ...gen.Condition) *borrowerDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b borrowerDo) Select(conds ...field.Expr) *borrowerDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b borrowerDo) Where(conds ...gen.Condition) *borrowerDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b borrowerDo) Order(conds ...field.Expr) *borrowerDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b borrowerDo) Distinct(cols ...field.Expr) *borrowerDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b borrowerDo) Omit(cols ...field.Expr) *borrowerDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b borrowerDo) Join(table schema.Tabler, on ...field.Expr) *borrowerDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b borrowerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *borrowerDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b borrowerDo) RightJoin(table schema.Tabler, on ...field.Expr) *borrowerDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b borrowerDo) Group(cols ...field.Expr) *borrowerDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b borrowerDo) Having(conds ...gen.Condition) *borrowerDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b borrowerDo) Limit(limit int) *borrowerDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b borrowerDo) Offset(offset int) *borrowerDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b borrowerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *borrowerDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b borrowerDo) Unscoped() *borrowerDo {
	return b.withDO(b.DO.Unscoped())
}

func (b borrowerDo) Create(values ...*model.Borrower) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b borrowerDo) CreateInBatches(values []*model.Borrower, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b borrowerDo) Save(values ...*model.Borrower) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b borrowerDo) First() (*model.Borrower, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Borrower), nil
	}
}

func (b borrowerDo) Take() (*model.Borrower, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Borrower), nil
	}
}

func (b borrowerDo) Last() (*model.Borrower, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Borrower), nil
	}
}

func (b borrowerDo) Find() ([]*model.Borrower, error) {
	result, err := b.DO.Find()
	return result.([]*model.Borrower), err
}

func (b borrowerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Borrower, err error) {
	buf := make([]*model.Borrower, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b borrowerDo) FindInBatches(result *[]*model.Borrower, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b borrowerDo) Attrs(attrs ...field.AssignExpr) *borrowerDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b borrowerDo) Assign(attrs ...field.AssignExpr) *borrowerDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b borrowerDo) Joins(fields ...field.RelationField) *borrowerDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b borrowerDo) Preload(fields ...field.RelationField) *borrowerDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b borrowerDo) FirstOrInit() (*model.Borrower, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Borrower), nil
	}
}

func (b borrowerDo) FirstOrCreate() (*model.Borrower, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Borrower), nil
	}
}

func (b borrowerDo) FindByPage(offset int, limit int) (result []*model.Borrower, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b borrowerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b borrowerDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b borrowerDo) Delete(models ...*model.Borrower) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *borrowerDo) withDO(do gen.Dao) *borrowerDo {
	b.DO = *do.(*gen.DO)
	return b
}
